public static void createTableProcedimento() {
        Connection connection = getConnection();
        PreparedStatement stmt = null;
        String sql = "CREATE TABLE IF NOT EXISTS procedimento (\n"
                + "  ID bigint(20) NOT NULL AUTO_INCREMENT,\n"
                + "  codigo VARCHAR(50) NOT NULL,\n"
                + "  nome VARCHAR(50) NOT NULL,\n"
                + "PRIMARY KEY (ID)\n"
                + ")";
        try {
            stmt = connection.prepareStatement(sql);
            stmt.execute();
            System.out.println("Create Tables Procedimento Ok!");
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            close(connection, stmt, null);
        }
    }

    public static void createTablePrestador() {
        Connection connection = getConnection();
        PreparedStatement stmt = null;
        String sql = "CREATE TABLE IF NOT EXISTS prestador (\n"
                + "  ID bigint(20) NOT NULL AUTO_INCREMENT,\n"
                + "  cnes VARCHAR(50) NOT NULL,\n"
                + "  nome VARCHAR(50) NOT NULL,\n"
                + "PRIMARY KEY (ID)\n"
                + ")";
        try {
            stmt = connection.prepareStatement(sql);
            stmt.execute();
            System.out.println("Create Table Prestador Ok!");
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            close(connection, stmt, null);
        }
    }

    public static void createTableFuncionario() {
        Connection connection = getConnection();
        PreparedStatement stmt = null;
        String sql = "CREATE TABLE IF NOT EXISTS funcionario (\n"
                + "  ID bigint(20) NOT NULL AUTO_INCREMENT,\n"
                + "  nome VARCHAR(50) NOT NULL,\n"
                + "  sobrenome VARCHAR(50) NOT NULL,\n"
                + "  cargo VARCHAR(50) NOT NULL,\n"
                + "PRIMARY KEY (ID)\n"
                + ")";
        try {
            stmt = connection.prepareStatement(sql);
            stmt.execute();
            System.out.println("Create Tables Funcionário Ok!");
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            close(connection, stmt, null);
        }
    }
    
    public static void createTableProducao(){
        Connection connection = getConnection();
        PreparedStatement stmt = null;
        String sql = "CREATE TABLE IF NOT EXISTS producao (\n"
                + "  ID bigint(20) NOT NULL AUTO_INCREMENT,\n"
                + "  funcionario VARCHAR(50) NOT NULL,\n"
                + "  prestador VARCHAR(50) NOT NULL,\n"
                + "  procedimento VARCHAR(50) NOT NULL,\n"
                + "  data VARCHAR(50) NOT NULL,\n"
                + "  data_entrada VARCHAR(50) NOT NULL,\n"
                + "  data_digitacao VARCHAR(50) NOT NULL,\n"
                + "  quantidade VARCHAR(50) NOT NULL,\n"
                + "PRIMARY KEY (ID)\n"
                + ")";
        try {
            stmt = connection.prepareStatement(sql);
            stmt.execute();
            System.out.println("Create Tables Produção Ok!");
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            close(connection, stmt, null);
        }
    }
    
    public static void createTableProducaoMedica(){
        Connection connection = getConnection();
        PreparedStatement stmt = null;
        String sql = "CREATE TABLE IF NOT EXISTS producao_medica (\n"
                + "  ID bigint(20) NOT NULL AUTO_INCREMENT,\n"
                + "  data_entrada_cmr DATE NOT NULL,\n"
                + "  prestador VARCHAR(50) NOT NULL,\n"
                + "  procedimento VARCHAR(50) NOT NULL,\n"
                + "  quantidade_laudos int NOT NULL,\n"
                + "  data_analise DATE NOT NULL,\n"
                + "  funcionario VARCHAR(50) NOT NULL,\n"
                + "  data_encaminhamento DATE NOT NULL,\n"
                + "  nucleos VARCHAR(50) NOT NULL,\n"
                + "PRIMARY KEY (ID)\n"
                + ")";
        try {
            stmt = connection.prepareStatement(sql);
            stmt.execute();
            System.out.println("Create Tables ProduçãoMedica Ok!");
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            close(connection, stmt, null);
        }
    }
    
     public static void createTableUsuarios(){
        Connection connection = getConnection();
        PreparedStatement stmt = null;
        String sql = "CREATE TABLE IF NOT EXISTS usuarios (\n"
                + "  ID bigint(20) NOT NULL AUTO_INCREMENT,\n"
                + "  login VARCHAR(50) NOT NULL,\n"
                + "  senha VARCHAR(50) NOT NULL,\n"
                + "  role_user VARCHAR(50) NOT NULL,\n"
                + "PRIMARY KEY (ID)\n"
                + ")";
        try {
            stmt = connection.prepareStatement(sql);
            stmt.execute();
            System.out.println("Create Tables Usuarios Ok!");
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            close(connection, stmt, null);
        }
    }

//slq criação de tabelas HSQLDB
CREATE CACHED TABLE usuarios
(
id INT PRIMARY KEY IDENTITY,
login VARCHAR(50) NOT NULL,
senha VARCHAR(50) NOT NULL,
role_user VARCHAR(10) NOT NULL)

CREATE CACHED TABLE procedimento
(
id INT PRIMARY KEY IDENTITY,
codigo VARCHAR(50) NULL,
nome VARCHAR(50) NOT NULL
)

CREATE CACHED TABLE prestador
(
id INT PRIMARY KEY IDENTITY,
cnes VARCHAR(50) NULL,
nome VARCHAR(50) NOT NULL
)

CREATE CACHED TABLE funcionario
(
id INT PRIMARY KEY IDENTITY,
nome VARCHAR(50) NOT NULL,
sobrenome VARCHAR(50)  NULL,
cargo VARCHAR(50) NOT NULL
)

CREATE CACHED TABLE producao
(
id INT PRIMARY KEY IDENTITY,
funcionario_id  




CREATE CACHED TABLE producao_medica
(
id INT PRIMARY KEY IDENTITY,
nome VARCHAR(50) NOT NULL,
sobrenome VARCHAR(50)  NULL,
cargo VARCHAR(50

